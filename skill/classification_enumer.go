// Code generated by "enumer -type=Classification -json"; DO NOT EDIT.

package skill

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ClassificationName = "SkillAttackSpellAttunement"

var _ClassificationIndex = [...]uint8{0, 5, 11, 16, 26}

const _ClassificationLowerName = "skillattackspellattunement"

func (i Classification) String() string {
	if i < 0 || i >= Classification(len(_ClassificationIndex)-1) {
		return fmt.Sprintf("Classification(%d)", i)
	}
	return _ClassificationName[_ClassificationIndex[i]:_ClassificationIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ClassificationNoOp() {
	var x [1]struct{}
	_ = x[Skill-(0)]
	_ = x[Attack-(1)]
	_ = x[Spell-(2)]
	_ = x[Attunement-(3)]
}

var _ClassificationValues = []Classification{Skill, Attack, Spell, Attunement}

var _ClassificationNameToValueMap = map[string]Classification{
	_ClassificationName[0:5]:        Skill,
	_ClassificationLowerName[0:5]:   Skill,
	_ClassificationName[5:11]:       Attack,
	_ClassificationLowerName[5:11]:  Attack,
	_ClassificationName[11:16]:      Spell,
	_ClassificationLowerName[11:16]: Spell,
	_ClassificationName[16:26]:      Attunement,
	_ClassificationLowerName[16:26]: Attunement,
}

var _ClassificationNames = []string{
	_ClassificationName[0:5],
	_ClassificationName[5:11],
	_ClassificationName[11:16],
	_ClassificationName[16:26],
}

// ClassificationString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ClassificationString(s string) (Classification, error) {
	if val, ok := _ClassificationNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ClassificationNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Classification values", s)
}

// ClassificationValues returns all values of the enum
func ClassificationValues() []Classification {
	return _ClassificationValues
}

// ClassificationStrings returns a slice of all String values of the enum
func ClassificationStrings() []string {
	strs := make([]string, len(_ClassificationNames))
	copy(strs, _ClassificationNames)
	return strs
}

// IsAClassification returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Classification) IsAClassification() bool {
	for _, v := range _ClassificationValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Classification
func (i Classification) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Classification
func (i *Classification) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Classification should be a string, got %s", data)
	}

	var err error
	*i, err = ClassificationString(s)
	return err
}
