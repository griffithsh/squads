// Code generated by "enumer -output=./events_enumer.go -type=StatType,CombatResult"; DO NOT EDIT.

package game

import (
	"fmt"
	"strings"
)

const _StatTypeName = "HPStatEnergyStatActionStatPrepStat"

var _StatTypeIndex = [...]uint8{0, 6, 16, 26, 34}

const _StatTypeLowerName = "hpstatenergystatactionstatprepstat"

func (i StatType) String() string {
	if i < 0 || i >= StatType(len(_StatTypeIndex)-1) {
		return fmt.Sprintf("StatType(%d)", i)
	}
	return _StatTypeName[_StatTypeIndex[i]:_StatTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _StatTypeNoOp() {
	var x [1]struct{}
	_ = x[HPStat-(0)]
	_ = x[EnergyStat-(1)]
	_ = x[ActionStat-(2)]
	_ = x[PrepStat-(3)]
}

var _StatTypeValues = []StatType{HPStat, EnergyStat, ActionStat, PrepStat}

var _StatTypeNameToValueMap = map[string]StatType{
	_StatTypeName[0:6]:        HPStat,
	_StatTypeLowerName[0:6]:   HPStat,
	_StatTypeName[6:16]:       EnergyStat,
	_StatTypeLowerName[6:16]:  EnergyStat,
	_StatTypeName[16:26]:      ActionStat,
	_StatTypeLowerName[16:26]: ActionStat,
	_StatTypeName[26:34]:      PrepStat,
	_StatTypeLowerName[26:34]: PrepStat,
}

var _StatTypeNames = []string{
	_StatTypeName[0:6],
	_StatTypeName[6:16],
	_StatTypeName[16:26],
	_StatTypeName[26:34],
}

// StatTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StatTypeString(s string) (StatType, error) {
	if val, ok := _StatTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _StatTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to StatType values", s)
}

// StatTypeValues returns all values of the enum
func StatTypeValues() []StatType {
	return _StatTypeValues
}

// StatTypeStrings returns a slice of all String values of the enum
func StatTypeStrings() []string {
	strs := make([]string, len(_StatTypeNames))
	copy(strs, _StatTypeNames)
	return strs
}

// IsAStatType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i StatType) IsAStatType() bool {
	for _, v := range _StatTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

const _CombatResultName = "VictoriousDefeatedEscaped"

var _CombatResultIndex = [...]uint8{0, 10, 18, 25}

const _CombatResultLowerName = "victoriousdefeatedescaped"

func (i CombatResult) String() string {
	if i < 0 || i >= CombatResult(len(_CombatResultIndex)-1) {
		return fmt.Sprintf("CombatResult(%d)", i)
	}
	return _CombatResultName[_CombatResultIndex[i]:_CombatResultIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CombatResultNoOp() {
	var x [1]struct{}
	_ = x[Victorious-(0)]
	_ = x[Defeated-(1)]
	_ = x[Escaped-(2)]
}

var _CombatResultValues = []CombatResult{Victorious, Defeated, Escaped}

var _CombatResultNameToValueMap = map[string]CombatResult{
	_CombatResultName[0:10]:       Victorious,
	_CombatResultLowerName[0:10]:  Victorious,
	_CombatResultName[10:18]:      Defeated,
	_CombatResultLowerName[10:18]: Defeated,
	_CombatResultName[18:25]:      Escaped,
	_CombatResultLowerName[18:25]: Escaped,
}

var _CombatResultNames = []string{
	_CombatResultName[0:10],
	_CombatResultName[10:18],
	_CombatResultName[18:25],
}

// CombatResultString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CombatResultString(s string) (CombatResult, error) {
	if val, ok := _CombatResultNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CombatResultNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CombatResult values", s)
}

// CombatResultValues returns all values of the enum
func CombatResultValues() []CombatResult {
	return _CombatResultValues
}

// CombatResultStrings returns a slice of all String values of the enum
func CombatResultStrings() []string {
	strs := make([]string, len(_CombatResultNames))
	copy(strs, _CombatResultNames)
	return strs
}

// IsACombatResult returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CombatResult) IsACombatResult() bool {
	for _, v := range _CombatResultValues {
		if i == v {
			return true
		}
	}
	return false
}
