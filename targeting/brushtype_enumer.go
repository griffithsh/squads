// Code generated by "enumer -type=BrushType -json"; DO NOT EDIT.

package targeting

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _BrushTypeName = "SingleHexWithinRangeOfTargetWithinRangeOfOriginLinearFromOrigin"

var _BrushTypeIndex = [...]uint8{0, 9, 28, 47, 63}

const _BrushTypeLowerName = "singlehexwithinrangeoftargetwithinrangeoforiginlinearfromorigin"

func (i BrushType) String() string {
	if i < 0 || i >= BrushType(len(_BrushTypeIndex)-1) {
		return fmt.Sprintf("BrushType(%d)", i)
	}
	return _BrushTypeName[_BrushTypeIndex[i]:_BrushTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BrushTypeNoOp() {
	var x [1]struct{}
	_ = x[SingleHex-(0)]
	_ = x[WithinRangeOfTarget-(1)]
	_ = x[WithinRangeOfOrigin-(2)]
	_ = x[LinearFromOrigin-(3)]
}

var _BrushTypeValues = []BrushType{SingleHex, WithinRangeOfTarget, WithinRangeOfOrigin, LinearFromOrigin}

var _BrushTypeNameToValueMap = map[string]BrushType{
	_BrushTypeName[0:9]:        SingleHex,
	_BrushTypeLowerName[0:9]:   SingleHex,
	_BrushTypeName[9:28]:       WithinRangeOfTarget,
	_BrushTypeLowerName[9:28]:  WithinRangeOfTarget,
	_BrushTypeName[28:47]:      WithinRangeOfOrigin,
	_BrushTypeLowerName[28:47]: WithinRangeOfOrigin,
	_BrushTypeName[47:63]:      LinearFromOrigin,
	_BrushTypeLowerName[47:63]: LinearFromOrigin,
}

var _BrushTypeNames = []string{
	_BrushTypeName[0:9],
	_BrushTypeName[9:28],
	_BrushTypeName[28:47],
	_BrushTypeName[47:63],
}

// BrushTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BrushTypeString(s string) (BrushType, error) {
	if val, ok := _BrushTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BrushTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to BrushType values", s)
}

// BrushTypeValues returns all values of the enum
func BrushTypeValues() []BrushType {
	return _BrushTypeValues
}

// BrushTypeStrings returns a slice of all String values of the enum
func BrushTypeStrings() []string {
	strs := make([]string, len(_BrushTypeNames))
	copy(strs, _BrushTypeNames)
	return strs
}

// IsABrushType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BrushType) IsABrushType() bool {
	for _, v := range _BrushTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for BrushType
func (i BrushType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for BrushType
func (i *BrushType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("BrushType should be a string, got %s", data)
	}

	var err error
	*i, err = BrushTypeString(s)
	return err
}
